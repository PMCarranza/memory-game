{"version":3,"sources":["components/Scoreboard/index.js","components/PictureCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","className","topScore","score","Pictures","onClick","clickedImage","id","alt","name","src","image","shuffle","array","i","length","j","Math","floor","random","App","state","deities","alreadyClicked","showSuccess","clickedDeities","setState","indexOf","push","handleIncrement","reShuffle","style","opacity","this","map","pic","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"omCAoBeA,MAZf,SAAoBC,GAChB,OAEI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAW,2CAAiBD,EAAME,WACjD,yBAAKD,UAAU,YAAW,8CAAoBD,EAAMG,WCErDC,G,MAVE,SAAAJ,GAAK,OAClB,yBAAKC,UAAU,OAAOI,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MAC1D,yBAAKN,UAAU,iBACX,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,QACjC,yBAAKV,UAAU,gBCD3B,SAASW,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAGlB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAHkC,KAG9BD,EAAMG,GAHwB,KAQ3C,OAAOH,E,IAiHMO,E,2MAzGbC,MAAQ,CACNC,UACAnB,MAAO,EACPD,SAAU,EACVqB,eAAgB,EAChBC,YAAa,EACbC,eAAgB,I,EAGlBnB,aAAe,SAAAC,GAEb,IAAIkB,EAAiB,EAAKJ,MAAMI,eAG5BtB,EAAQ,EAAKkB,MAAMlB,MACnBD,EAAW,EAAKmB,MAAMnB,SAC1B,EAAKwB,SAAS,CACZH,eAAgB,KAIkB,IAAhCE,EAAeE,QAAQpB,IAEzBkB,EAAeG,KAAKrB,GAGpB,EAAKsB,kBAEL,EAAKC,aAEyB,KAArB,EAAKT,MAAMlB,MAGpB,EAAKuB,SAAS,CACZF,YAAa,EACbrB,MAAO,EACPsB,eAAgB,MAIlB,EAAKC,SAAS,CACZvB,MAAO,EACPsB,eAAgB,KAIlB,EAAKC,SAAS,CACZH,eAAgB,KAMhBpB,EAAQD,GACV,EAAKwB,SAAS,CACZxB,SAAUC,K,EAOhB0B,gBAAkB,WAChB,EAAKH,SAAS,CAAEvB,MAAO,EAAKkB,MAAMlB,MAAQ,K,EAI5C2B,UAAY,WACV,EAAKJ,SAAS,CAAEJ,QAASV,EAAQU,M,wEAGzB,IAAD,OACP,OACE,yBAAKrB,UAAU,aACb,yBACEA,UAAU,qBACV8B,MAAO,CAAEC,QAASC,KAAKZ,MAAME,iBAF/B,uGAMA,yBACEtB,UAAU,sBACV8B,MAAO,CAAEC,QAASC,KAAKZ,MAAMG,cAF/B,gBAMA,kBAAC,EAAD,CACErB,MAAO8B,KAAKZ,MAAMlB,MAClBD,SAAU+B,KAAKZ,MAAMnB,WAEvB,yBAAKD,UAAU,OAEZgC,KAAKZ,MAAMC,QAAQY,KAAI,SAAAC,GAAG,OACzB,kBAAC,EAAD,CACEC,IAAKD,EAAI5B,GACTA,GAAI4B,EAAI5B,GACRI,MAAOwB,EAAIxB,MACXL,aAAc,EAAKA,wB,GAnGf+B,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.efae4a63.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./scoreboard.css\";\n\n// this component renders the current and highest score to the dom\n// the simplest way to define a component is to write a JS function\n// This function is a valid React component because it accepts a single “props” object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions. https://reactjs.org/docs/components-and-props.html#function-and-class-components\n// elements are the building blocks of react applications, an element describes what is being seen on the screen, in the code below that will be the scores\n\nfunction Scoreboard(props) {\n    return (\n\n        <header className=\"scoreB\">\n            <div className=\"row\">\n                <div className=\"col-md-6\"><h6>High Score: {props.topScore}</h6></div>\n                <div className=\"col-md-6\"><h6>Current Score: {props.score}</h6></div>\n            </div>\n        </header>\n\n    );\n}\nexport default Scoreboard;","import React from \"react\";\n// importing the style.css document that goes with this file\nimport \"./style.css\";\n\n// this component will handle the onClick event and it will render the images to the dom\n// const Pictures is being difined as a function props\nconst Pictures = props => (\n    <div className=\"card\" onClick={() => props.clickedImage(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n            <div className=\"overlay\">\n            </div>\n        </div>\n    </div>\n);\n\nexport default Pictures;","import React, { Component } from \"react\";\n\n// imports array of objects with images, names and ids\nimport deities from \"./pics.json\";\n// imports components to be used to render the data\nimport Scoreboard from \"./components/Scoreboard\";\nimport Picture from \"./components/PictureCard\";\n\n// responding to the onClick in PictureCard/index.js component the following randomly generates the images to display\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    // the random number generated is passed to an array and that determines the postion of selected image\n    [array[i], array[j]] = [array[j], array[i]];\n    // console.log('this is i - - > ',i, 'this is j - - > ', j);\n  }\n  // returns image id, image path and image name, this is an array of objects\n  // console.log('array - - > ', array);\n  return array;\n}\n\n\n// app is being defined as a class\n\nclass App extends Component {\n  // object state is created containin a list of key value pairs\n  state = {\n    deities,\n    score: 0,\n    topScore: 0,\n    alreadyClicked: 0,\n    showSuccess: 0,\n    clickedDeities: []\n  };\n\n  clickedImage = id => {\n    // keeps track of the images clicked and pushes them into the clickedDeities array\n    var clickedDeities = this.state.clickedDeities;\n    // console.log('clicked Deities - - >', clickedDeities)\n    // updates score\n    var score = this.state.score;\n    var topScore = this.state.topScore;\n    this.setState({\n      alreadyClicked: 0\n    });\n\n    // if the clicked image has an id of the indexed deities\n    if (clickedDeities.indexOf(id) === -1) {\n      // push that id of the clicked image into the array to be stored\n      clickedDeities.push(id);\n      // console.log(clickedDeities);\n      // run the score function, scores increments by one every time an unclicked image is clicked\n      this.handleIncrement();\n      // run reshuffle function after each click\n      this.reShuffle();\n      // if all the images have been clicked w/o repeating\n    } else if (this.state.score === 12) {\n      // if user wins display message\n      // reset score counter to 0 and empty the array containing the clicked images data\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedDeities: []\n      });\n    } else {\n       // if user clicks an image a second time, reset score counter to 0, empty array\n      this.setState({\n        score: 0,\n        clickedDeities: []\n      });\n      // console.log(\"duplicate\");\n      // change state to alreadyclicked\n      this.setState({\n        alreadyClicked: 1\n      });\n    }\n\n\n// if score is greater than topScore change the state to the new high score\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  // directly related to Scoreboard componet index\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle images function\n  reShuffle = () => {\n    this.setState({ deities: shuffle(deities) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.alreadyClicked }}\n        >\n          You should have been paying more attention, that was a double tap... click an image to start again.\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Nicely done!\n          </div>\n        <Scoreboard\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"row\">\n          {/* .map() used to iterate over the content of deities and breaks the data into four key value pair pieces */}\n          {this.state.deities.map(pic => (\n            <Picture\n              key={pic.id}\n              id={pic.id}\n              image={pic.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// renders content to DOM\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}