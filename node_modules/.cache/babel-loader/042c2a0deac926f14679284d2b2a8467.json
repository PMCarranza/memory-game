{"ast":null,"code":"var _jsxFileName = \"/Users/marinocarranza/Desktop/memory-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport paintings from \"./pics.json\"; // import Scoreboard from \"./components/Scoreboard\";\n\nimport Card from \"./components/PictureCard\"; // shuffle upon each click\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      paintings,\n      score: 0,\n      topScore: 0,\n      showAlert: 0,\n      showSuccess: 0,\n      clickedpaintings: []\n    };\n\n    this.clickedImage = id => {\n      // assign the state of the empty array to a let to be updated\n      let clickedpaintings = this.state.clickedpaintings;\n      let score = this.state.score;\n      let topScore = this.state.topScore;\n      this.setState({\n        showAlert: 0\n      }); // if the clicked image has an id of the indexed paintings\n\n      if (clickedpaintings.indexOf(id) === -1) {\n        // push that id into that id into the array to be stored\n        clickedpaintings.push(id);\n        console.log(clickedpaintings); // run the score function\n\n        this.handleIncrement(); // run the reshuffle function after each click\n\n        this.makeShuffle();\n      } else if (this.state.score === 12) {\n        // alert player wins\n        this.setState({\n          showSuccess: 1,\n          score: 0,\n          clickedpaintings: []\n        });\n      } else {\n        // alert player loss\n        this.setState({\n          score: 0,\n          clickedpaintings: []\n        });\n        console.log(\"duplicate\");\n        this.setState({\n          showAlert: 1\n        });\n      }\n\n      if (score > topScore) {\n        this.setState({\n          topScore: score\n        });\n      }\n    };\n\n    this.handleIncrement = () => {\n      // setState updates a components states\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n\n    this.makeShuffle = () => {\n      this.setState({\n        paintings: shuffle(paintings)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      style: {\n        opacity: this.state.showAlert\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"You clicked on this already, try again...\"), React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      style: {\n        opacity: this.state.showSuccess\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Brilliant, you haven't clicked on duplicates!\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.paintings.map(painting => React.createElement(Card, {\n      key: painting.id,\n      id: painting.id,\n      artist: painting.artist,\n      title: painting.title,\n      year: painting.year,\n      image: painting.image,\n      clickedImage: this.clickedImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/marinocarranza/Desktop/memory-game/src/App.js"],"names":["React","Component","paintings","Card","shuffle","array","i","length","j","Math","floor","random","App","state","score","topScore","showAlert","showSuccess","clickedpaintings","clickedImage","id","setState","indexOf","push","console","log","handleIncrement","makeShuffle","render","opacity","map","painting","artist","title","year","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport paintings from \"./pics.json\";\n// import Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/PictureCard\";\n\n// shuffle upon each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    paintings,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedpaintings: []\n  };\n\n  clickedImage = id => {\n    // assign the state of the empty array to a let to be updated\n    let clickedpaintings = this.state.clickedpaintings;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0\n    });\n\n    // if the clicked image has an id of the indexed paintings\n    if (clickedpaintings.indexOf(id) === -1) {\n      // push that id into that id into the array to be stored\n      clickedpaintings.push(id);\n      console.log(clickedpaintings);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (this.state.score === 12) {\n      // alert player wins\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedpaintings: []\n      });\n    } else {\n       // alert player loss\n      this.setState({\n        score: 0,\n        clickedpaintings: []\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        showAlert: 1\n      });\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  handleIncrement = () => {\n    // setState updates a components states\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle up images\n  makeShuffle = () => {\n    this.setState({ paintings: shuffle(paintings) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.showAlert }}\n        >\n          You clicked on this already, try again...\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Brilliant, you haven't clicked on duplicates!\n          </div>\n        {/* <Scoreboard\n          title=\"MoMA clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        /> */}\n        <div className=\"row\">\n          {this.state.paintings.map(painting => (\n            <Card\n              key={painting.id}\n              id={painting.id}\n              artist={painting.artist}\n              title={painting.title}\n              year={painting.year}\n              image={painting.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}