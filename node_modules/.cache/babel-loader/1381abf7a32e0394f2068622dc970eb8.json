{"ast":null,"code":"var _jsxFileName = \"/Users/marinocarranza/Desktop/memory-game/src/App.js\";\nimport React, { Component } from \"react\"; // imports array of objects with images, names and ids\n\nimport deities from \"./pics.json\"; // imports components to be used to render the data\n\nimport Scoreboard from \"./components/Scoreboard\";\nimport Picture from \"./components/PictureCard\"; // responding to the onClick in PictureCard/index.js component the following randomly generates the images to display\n\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1)); // the random number generated is passed to an array and that determines the postion of selected image\n\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  } // returns image id, image path and image name, this is an array of objects\n  // console.log('array - - > ', array);\n\n\n  return array;\n} // app is being defined as a class\n\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      deities,\n      score: 0,\n      topScore: 0,\n      alreadyClicked: 0,\n      showSuccess: 0,\n      clickedDeities: []\n    };\n\n    this.clickedImage = id => {\n      // keeps track of the images clicked and pushes them into the clickedDeities array\n      var clickedDeities = this.state.clickedDeities; // console.log('clicked Deities - - >', clickedDeities)\n      // updates score\n\n      var score = this.state.score;\n      var topScore = this.state.topScore;\n      this.setState({\n        alreadyClicked: 0\n      }); // if the clicked image has an id of the indexed deities\n\n      if (clickedDeities.indexOf(id) === -1) {\n        // push that id of the clicked image into the array to be stored\n        clickedDeities.push(id); // console.log(clickedDeities);\n        // run the score function, scores increments by one every time an unclicked image is clicked\n\n        this.handleIncrement(); // run reshuffle function after each click\n\n        this.reShuffle(); // if all the images have been clicked w/o repeating\n      } else if (this.state.score === 12) {\n        // if user wins display message\n        // reset score counter to 0 and empty the array containing the clicked images data\n        this.setState({\n          showSuccess: 1,\n          score: 0,\n          clickedDeities: []\n        });\n      } else {\n        // if user clicks an image a second time, reset score counter to 0, empty array\n        this.setState({\n          score: 0,\n          clickedDeities: []\n        }); // console.log(\"duplicate\");\n        // change state to alreadyclicked\n\n        this.setState({\n          alreadyClicked: 1\n        });\n      } // if score is greater than topScore change the state to the new high score\n\n\n      if (score > topScore) {\n        this.setState({\n          topScore: score\n        });\n      }\n    };\n\n    this.handleIncrement = () => {\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n\n    this.reShuffle = () => {\n      this.setState({\n        deities: shuffle(deities)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      style: {\n        opacity: this.state.alreadyClicked\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"You should have been paying more attention, that was a double tap... click an image to start again.\"), React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      style: {\n        opacity: this.state.showSuccess\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Nicely done!\"), React.createElement(Scoreboard, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.state.deities.map(pic => React.createElement(Picture, {\n      key: pic.id,\n      id: pic.id,\n      image: pic.image,\n      clickedImage: this.clickedImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/marinocarranza/Desktop/memory-game/src/App.js"],"names":["React","Component","deities","Scoreboard","Picture","shuffle","array","i","length","j","Math","floor","random","App","state","score","topScore","alreadyClicked","showSuccess","clickedDeities","clickedImage","id","setState","indexOf","push","handleIncrement","reShuffle","render","opacity","map","pic","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// imports array of objects with images, names and ids\nimport deities from \"./pics.json\";\n// imports components to be used to render the data\nimport Scoreboard from \"./components/Scoreboard\";\nimport Picture from \"./components/PictureCard\";\n\n// responding to the onClick in PictureCard/index.js component the following randomly generates the images to display\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    // the random number generated is passed to an array and that determines the postion of selected image\n    [array[i], array[j]] = [array[j], array[i]];\n    // console.log('this is i - - > ',i, 'this is j - - > ', j);\n  }\n  // returns image id, image path and image name, this is an array of objects\n  // console.log('array - - > ', array);\n  return array;\n}\n\n\n// app is being defined as a class\n\nclass App extends Component {\n  // object state is created containin a list of key value pairs\n  state = {\n    deities,\n    score: 0,\n    topScore: 0,\n    alreadyClicked: 0,\n    showSuccess: 0,\n    clickedDeities: []\n  };\n\n  clickedImage = id => {\n    // keeps track of the images clicked and pushes them into the clickedDeities array\n    var clickedDeities = this.state.clickedDeities;\n    // console.log('clicked Deities - - >', clickedDeities)\n    // updates score\n    var score = this.state.score;\n    var topScore = this.state.topScore;\n    this.setState({\n      alreadyClicked: 0\n    });\n\n    // if the clicked image has an id of the indexed deities\n    if (clickedDeities.indexOf(id) === -1) {\n      // push that id of the clicked image into the array to be stored\n      clickedDeities.push(id);\n      // console.log(clickedDeities);\n      // run the score function, scores increments by one every time an unclicked image is clicked\n      this.handleIncrement();\n      // run reshuffle function after each click\n      this.reShuffle();\n      // if all the images have been clicked w/o repeating\n    } else if (this.state.score === 12) {\n      // if user wins display message\n      // reset score counter to 0 and empty the array containing the clicked images data\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedDeities: []\n      });\n    } else {\n       // if user clicks an image a second time, reset score counter to 0, empty array\n      this.setState({\n        score: 0,\n        clickedDeities: []\n      });\n      // console.log(\"duplicate\");\n      // change state to alreadyclicked\n      this.setState({\n        alreadyClicked: 1\n      });\n    }\n\n\n// if score is greater than topScore change the state to the new high score\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  // directly related to Scoreboard componet index\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle images function\n  reShuffle = () => {\n    this.setState({ deities: shuffle(deities) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.alreadyClicked }}\n        >\n          You should have been paying more attention, that was a double tap... click an image to start again.\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Nicely done!\n          </div>\n        <Scoreboard\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"row\">\n          {/* .map() used to iterate over the content of deities and breaks the data into four key value pair pieces */}\n          {this.state.deities.map(pic => (\n            <Picture\n              key={pic.id}\n              id={pic.id}\n              image={pic.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}