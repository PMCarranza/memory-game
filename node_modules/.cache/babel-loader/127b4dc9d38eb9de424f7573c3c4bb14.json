{"ast":null,"code":"import _classCallCheck from\"/Users/marinocarranza/Desktop/memory-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/marinocarranza/Desktop/memory-game/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/marinocarranza/Desktop/memory-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/marinocarranza/Desktop/memory-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/marinocarranza/Desktop/memory-game/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";// imports array of objects with images, names and ids\nimport deities from\"./pics.json\";// imports components to be used to render the data\nimport Scoreboard from\"./components/Scoreboard\";import Picture from\"./components/PictureCard\";// responding to the onClick in PictureCard/index.js component the following randomly generates the images to display\nfunction shuffle(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));// the random number generated is passed to an array and that determines the postion of selected image\nvar _ref=[array[j],array[i]];array[i]=_ref[0];array[j]=_ref[1];}// returns image id, image path and image name, this is an array of objects\n// console.log('array - - > ', array);\nreturn array;}// app is being defined as a class\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={deities:deities,score:0,topScore:0,alreadyClicked:0,showSuccess:0,clickedDeities:[]};_this.clickedImage=function(id){// keeps track of the images clicked and pushes them into the clickedDeities array\nvar clickedDeities=_this.state.clickedDeities;// console.log('clicked Deities - - >', clickedDeities)\n// updates score\nvar score=_this.state.score;var topScore=_this.state.topScore;_this.setState({alreadyClicked:0});// if the clicked image has an id of the indexed deities\nif(clickedDeities.indexOf(id)===-1){// push that id of the clicked image into the array to be stored\nclickedDeities.push(id);// console.log(clickedDeities);\n// run the score function, scores increments by one every time an unclicked image is clicked\n_this.handleIncrement();// run reshuffle function after each click\n_this.reShuffle();// if all the images have been clicked w/o repeating\n}else if(_this.state.score===12){// if user wins display message\n// reset score counter to 0 and empty the array containing the clicked images data\n_this.setState({showSuccess:1,score:0,clickedDeities:[]});}else{// if user clicks an image a second time, reset score counter to 0, empty array\n_this.setState({score:0,clickedDeities:[]});// console.log(\"duplicate\");\n// change state to alreadyclicked\n_this.setState({alreadyClicked:1});}// if score is greater than topScore change the state to the new high score\nif(score>topScore){_this.setState({topScore:score});}};_this.handleIncrement=function(){_this.setState({score:_this.state.score+1});};_this.reShuffle=function(){_this.setState({deities:shuffle(deities)});};return _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",{className:\"container\"},React.createElement(\"div\",{className:\"alert alert-danger\",style:{opacity:this.state.alreadyClicked}},\"You should have been paying more attention, that was a double tap... click an image to start again.\"),React.createElement(\"div\",{className:\"alert alert-success\",style:{opacity:this.state.showSuccess}},\"Nicely done!\"),React.createElement(Scoreboard,{score:this.state.score,topScore:this.state.topScore}),React.createElement(\"div\",{className:\"row\"},this.state.deities.map(function(pic){return React.createElement(Picture,{key:pic.id,id:pic.id,image:pic.image,clickedImage:_this2.clickedImage});})));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/marinocarranza/Desktop/memory-game/src/App.js"],"names":["React","Component","deities","Scoreboard","Picture","shuffle","array","i","length","j","Math","floor","random","App","state","score","topScore","alreadyClicked","showSuccess","clickedDeities","clickedImage","id","setState","indexOf","push","handleIncrement","reShuffle","opacity","map","pic","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// imports array of objects with images, names and ids\nimport deities from \"./pics.json\";\n// imports components to be used to render the data\nimport Scoreboard from \"./components/Scoreboard\";\nimport Picture from \"./components/PictureCard\";\n\n// responding to the onClick in PictureCard/index.js component the following randomly generates the images to display\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    // the random number generated is passed to an array and that determines the postion of selected image\n    [array[i], array[j]] = [array[j], array[i]];\n    // console.log('this is i - - > ',i, 'this is j - - > ', j);\n  }\n  // returns image id, image path and image name, this is an array of objects\n  // console.log('array - - > ', array);\n  return array;\n}\n\n\n// app is being defined as a class\n\nclass App extends Component {\n  // object state is created containin a list of key value pairs\n  state = {\n    deities,\n    score: 0,\n    topScore: 0,\n    alreadyClicked: 0,\n    showSuccess: 0,\n    clickedDeities: []\n  };\n\n  clickedImage = id => {\n    // keeps track of the images clicked and pushes them into the clickedDeities array\n    var clickedDeities = this.state.clickedDeities;\n    // console.log('clicked Deities - - >', clickedDeities)\n    // updates score\n    var score = this.state.score;\n    var topScore = this.state.topScore;\n    this.setState({\n      alreadyClicked: 0\n    });\n\n    // if the clicked image has an id of the indexed deities\n    if (clickedDeities.indexOf(id) === -1) {\n      // push that id of the clicked image into the array to be stored\n      clickedDeities.push(id);\n      // console.log(clickedDeities);\n      // run the score function, scores increments by one every time an unclicked image is clicked\n      this.handleIncrement();\n      // run reshuffle function after each click\n      this.reShuffle();\n      // if all the images have been clicked w/o repeating\n    } else if (this.state.score === 12) {\n      // if user wins display message\n      // reset score counter to 0 and empty the array containing the clicked images data\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedDeities: []\n      });\n    } else {\n       // if user clicks an image a second time, reset score counter to 0, empty array\n      this.setState({\n        score: 0,\n        clickedDeities: []\n      });\n      // console.log(\"duplicate\");\n      // change state to alreadyclicked\n      this.setState({\n        alreadyClicked: 1\n      });\n    }\n\n\n// if score is greater than topScore change the state to the new high score\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  // directly related to Scoreboard componet index\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle images function\n  reShuffle = () => {\n    this.setState({ deities: shuffle(deities) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.alreadyClicked }}\n        >\n          You should have been paying more attention, that was a double tap... click an image to start again.\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Nicely done!\n          </div>\n        <Scoreboard\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"row\">\n          {/* .map() used to iterate over the content of deities and breaks the data into four key value pair pieces */}\n          {this.state.deities.map(pic => (\n            <Picture\n              key={pic.id}\n              id={pic.id}\n              image={pic.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}