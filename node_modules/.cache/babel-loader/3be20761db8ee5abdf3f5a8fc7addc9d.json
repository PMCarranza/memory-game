{"ast":null,"code":"var _jsxFileName = \"/Users/marinocarranza/Desktop/REACTW19HW/no-double-tap/src/App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n\nimport PictureCard from './components/PictureCard';\nimport picture from './pics.json'; // import PictureCards from './components/PictureCard';\n// generatin random\n\nfunction generateRandom(array) {\n  for (var i = array.length - 1; 1 > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j] = [array[j], array[i]]];\n  }\n\n  ;\n  return array;\n}\n\n;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      picture\n    };\n\n    this.shuffleThem = () => {\n      // setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.  (react docs)\n      this.setState({\n        picture: generateRandom(picture)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.state.picture.map(pics => React.createElement(PictureCard, {\n      image: pics.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/marinocarranza/Desktop/REACTW19HW/no-double-tap/src/App.js"],"names":["React","Component","PictureCard","picture","generateRandom","array","i","length","j","Math","floor","random","App","state","shuffleThem","setState","render","map","pics","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CACA;AAEA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+B,IAAI,CAAnC,EAAsCD,CAAC,EAAvC,EAA0C;AACxC,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,KAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACG,CAAD,CAAL,GAAW,CAACH,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAAtB;AACD;;AAAA;AACD,SAAOD,KAAP;AACD;;AAAA;;AAGD,MAAMO,GAAN,SAAkBX,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BY,KAD0B,GAClB;AACNV,MAAAA;AADM,KADkB;;AAAA,SAM1BW,WAN0B,GAMZ,MAAM;AACpB;AACE,WAAKC,QAAL,CAAc;AAACZ,QAAAA,OAAO,EAACC,cAAc,CAACD,OAAD;AAAvB,OAAd;AACH,KAT2B;AAAA;;AAW1Ba,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKH,KAAL,CAAWV,OAAX,CAAmBc,GAAnB,CAAuBC,IAAI,IAC1B,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACC,KADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,CADF;AAQE;;AApBsB;;AAqB3B;AAED,eAAeP,GAAf","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport PictureCard from './components/PictureCard';\nimport picture from './pics.json';\n// import PictureCards from './components/PictureCard';\n\n// generatin random\nfunction generateRandom(array) {\n  for (var i = array.length - 1; 1 > 0; i--){\n    var j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j] = [array[j], array[i]]];\n  };\n  return array;\n};\n\n\nclass App extends Component {\n  state = {\n    picture,\n  };\n\n// shuffles images\n  shuffleThem = () => {\n  // setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.  (react docs)\n    this.setState({picture:generateRandom(picture)})\n}\n\n  render() {\n    return (\n      <div className=\"row\">\n      {this.state.picture.map(pics => (\n        <PictureCard\n          image={pics.image}\n        />\n      ))}\n    </div>\n    )};\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}