{"ast":null,"code":"var _jsxFileName = \"/Users/marinocarranza/Desktop/REACTW19HW/no-double-tap/src/App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n\nimport PictureCard from './components/PictureCard';\nimport picture from './pics.json'; // generatin random\n\nfunction generateRandom(array) {\n  for (var i = array.length - 1; 1 > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n\n  ;\n  return array;\n}\n\n;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      picture,\n      clickedPicture: [],\n      score: 0\n    };\n\n    this.clickedPic = id => {\n      var clickedPicture = this.state.clickedPicture;\n      var score = this.state.score;\n      this.setState({\n        showAlert: 0\n      });\n    };\n\n    this.shuffleThem = () => {\n      // setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.  (react docs)\n      this.setState({\n        picture: generateRandom(picture)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.state.picture.map(pics => React.createElement(PictureCard, {\n      image: pics.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/marinocarranza/Desktop/REACTW19HW/no-double-tap/src/App.js"],"names":["React","Component","PictureCard","picture","generateRandom","array","i","length","j","Math","floor","random","App","state","clickedPicture","score","clickedPic","id","setState","showAlert","shuffleThem","render","map","pics","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+B,IAAI,CAAnC,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AADyC,eAElB,CAACD,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAFkB;AAExCD,IAAAA,KAAK,CAACC,CAAD,CAFmC;AAE9BD,IAAAA,KAAK,CAACG,CAAD,CAFyB;AAG1C;;AAAA;AACD,SAAOH,KAAP;AACD;;AAAA;;AAGD,MAAMO,GAAN,SAAkBX,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BY,KAD0B,GAClB;AACNV,MAAAA,OADM;AAENW,MAAAA,cAAc,EAAE,EAFV;AAGNC,MAAAA,KAAK,EAAE;AAHD,KADkB;;AAAA,SAO1BC,UAP0B,GAObC,EAAE,IAAI;AACjB,UAAIH,cAAc,GAAG,KAAKD,KAAL,CAAWC,cAAhC;AACA,UAAIC,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;AACA,WAAKG,QAAL,CAAc;AACZC,QAAAA,SAAS,EAAE;AADC,OAAd;AAID,KAdyB;;AAAA,SAiB1BC,WAjB0B,GAiBZ,MAAM;AAClB;AACA,WAAKF,QAAL,CAAc;AAAEf,QAAAA,OAAO,EAAEC,cAAc,CAACD,OAAD;AAAzB,OAAd;AACD,KApByB;AAAA;;AAsB1BkB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKR,KAAL,CAAWV,OAAX,CAAmBmB,GAAnB,CAAuBC,IAAI,IAC1B,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACC,KADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AASD;;AAhCyB;;AAiC3B;AAED,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport PictureCard from './components/PictureCard';\nimport picture from './pics.json';\n\n// generatin random\nfunction generateRandom(array) {\n  for (var i = array.length - 1; 1 > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  };\n  return array;\n};\n\n\nclass App extends Component {\n  state = {\n    picture,\n    clickedPicture: [],\n    score: 0\n  };\n\n  clickedPic = id => {\n    var clickedPicture = this.state.clickedPicture;\n    var score = this.state.score;\n    this.setState({\n      showAlert: 0\n    });\n\n  }\n\n  // shuffles images\n  shuffleThem = () => {\n    // setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.  (react docs)\n    this.setState({ picture: generateRandom(picture) })\n  };\n\n  render() {\n    return (\n      <div className=\"row\">\n        {this.state.picture.map(pics => (\n          <PictureCard\n            image={pics.image}\n          />\n        ))}\n      </div>\n    )\n  };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}